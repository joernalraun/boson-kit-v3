<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="f9Pc9Hh3/ln17af0Juj`" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="aZCTpZl`{XQ4p3DjcZxk" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BosonAnalogPins {" line1="    P0 = AnalogPin.P0," line2="    P1 = AnalogPin.P1," line3="    P2 = AnalogPin.P2," line4="    C16 = AnalogPin.C16" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="x/6`A1r72`A4RW.?T+bE" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BosonPins {" line1="    P0 = DigitalPin.P0," line2="    P1 = DigitalPin.P1," line3="    P2 = DigitalPin.P2," line4="    P3 = DigitalPin.P3," line5="    C16 = DigitalPin.C16," line6="    C17 = DigitalPin.C17" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="LeLVdxe#h-^g{qH55EGE" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BosonSpeakerPins {" line1="    M0," line2="    M1" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="v9~fc?Cy2MIF9y0W1q-g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace BosonKitV3 {" line1="" line2="" line3="    //% block=&quot;set digital value for fan on %pin to %level&quot;" line4="    //% blockId=&quot;writeDigitalPin&quot;" line5="    //% block.loc.de=&quot;setze digitalen Wert f체r Ventilator an %pin auf %level&quot;" line6="    //% level.min=0 level.max=1 level.defl=1" line7="    export function writeDigitalPin(pin: BosonPins, level: number): void {" line8="        pins.digitalWritePin(&lt;number&gt;pin, level);" line9="    }" line10="    //% block=&quot;set analog value for fan on %pin to %level&quot;" line11="    //% blockId=&quot;writeAnalogPin&quot;" line12="    //% block.loc.de=&quot;setze analogen Wert f체r Ventilator an %pin auf %level&quot;" line13="    //% level.min=0 level.max=1023 level.defl=511" line14="    export function writeAnalogPin(pin: BosonPins, level: number): void {" line15="        pins.digitalWritePin(&lt;number&gt;pin, level);" line16="    }" line17="" line18="" line19="    //% blockId=readAnalogSensor weight=100" line20="    //% block=&quot;analog sensor value at pin %pin&quot;" line21="    //% block.loc.de=&quot;analoge Werte von Sensor an %pin&quot;" line22="    export function readAnalogSensor(pin: BosonAnalogPins): number {" line23="        return pins.analogReadPin(&lt;number&gt;pin);" line24="    }" line25="" line26="" line27="    //% blockId=readDigitalSensor weight=100" line28="    //% block=&quot;digital sensor value at pin %pin&quot;" line29="    //% block.loc.de=&quot;digitale Werte von Sensor an %pin&quot;" line30="    export function readDigitalSensor(pin: BosonPins): number {" line31="        return pins.digitalReadPin(&lt;number&gt;pin);" line32="    }" line33="    //% blockId=&quot;writeServo&quot;" line34="    //% block=&quot;servo write pin %pin to %level&quot;" line35="    //% block.loc.de=&quot;setze Winkel von Servo %pin auf %level째&quot;" line36="    //% level.min=0 level.max=180 level.defl=90" line37="    export function writeServo(pin: BosonPins, level: number): void {" line38="        return pins.servoWritePin(&lt;number&gt;pin, level)" line39="    }" line40="" line41="" line42="    //% blockId=setSpeakerPin weight=100" line43="    //% block=&quot;set audio pin to %pin at volume %volume&quot;" line44="    //% block.loc.de=&quot;setze Audio Pin auf %pin mit Lautst채rke %volume&quot;" line45="    //% volume.min=0 volume.max=100 volume.defl=50" line46="    export function setSpeakerPin(pin: BosonSpeakerPins, volume: number) {" line47="        switch (pin) {" line48="            case BosonSpeakerPins.M0:" line49="                pins.digitalWritePin(DigitalPin.M_MODE, 0)" line50="                pins.digitalWritePin(DigitalPin.M0_SPEED, 0)" line51="                pins.setAudioPin(AnalogPin.M0_DIR)" line52="                music.setSilenceLevel(0)" line53="                music.setVolume(volume)" line54="                break;" line55="            case BosonSpeakerPins.M1:" line56="                pins.digitalWritePin(DigitalPin.M_MODE, 0)" line57="                pins.digitalWritePin(DigitalPin.M1_SPEED, 0)" line58="                pins.setAudioPin(AnalogPin.M1_DIR)" line59="                music.setSilenceLevel(0)" line60="                music.setVolume(volume)" line61="                break;" line62="        }" line63="" line64="    }" line65="" line66="" line67="    //% blockId=&quot;onEventOnPin&quot;" line68="    //% block=&quot;on event on pin %pin&quot;" line69="    //% block.loc.de=&quot;wenn Ereignis an Pin %pin &quot;" line70="    export function onEventOnPin(pin: BosonPins, handler: () =&gt; void): void {" line71="        pins.setPull(&lt;number&gt;pin, PinPullMode.PullUp);" line72="        input.onPinTouchEvent(&lt;number&gt;pin, input.buttonEventValue(ButtonEvent.Up), handler);" line73="    }" line74="}" numlines="75"></mutation></block></next></block></next></block></next></block></statement></block><block type="device_forever" id="P-!bRUc,SQS.@j@{v5Y1" x="1072" y="20"></block></xml>